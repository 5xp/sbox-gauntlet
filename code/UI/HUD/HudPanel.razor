@namespace Gauntlet.UI
@using Gauntlet.Player
@using Gauntlet.Player.Mechanics
@using Gauntlet.Timer
@using Gauntlet.Utils
@inherits PanelComponent

<root class="pk"
      style="transform: translateX(@( Position.x / 16 )%) translateY(@( Position.y / 9 )%) rotate(@( Position.z )deg) scale(@( GetScale() ));">
	@if ( PlayerPreferences.Instance.KeyPressHudEnabled )
	{
		<KeyPressPanel/>
	}
	<SpeedometerPanel Controller="@Controller"/>
</root>

@code
{
	[Property] private PlayerController Controller { get; set; }
	[Property] private Timer Timer { get; set; }
	private TimerPanel TimerPanel { get; set; }

	/// <summary>
	/// The z component is rotation.
	/// The w component is depth (negative is closer to the camera, positive is further away).
	/// </summary>
	private Vector4 Position { get; set; } = Vector4.Zero;

	private Vector4 WishSwayContribution { get; set; }
	private Vector4 SwayContribution { get; set; }
	private DampedSpring ViewPunchSpring { get; set; }

	protected override int BuildHash()
	{
		HashCode hash = new();
		hash.Add( Position );
		return hash.ToHashCode();
	}

	protected override void OnStart()
	{
		Timer.OnTimerStart += OnTimerStart;
		Timer.OnTimerRestart += OnTimerRestart;
		Timer.OnTimerEnd += OnTimerEnd;
		ViewPunchSpring = Controller.GetMechanic<ViewPunchMechanic>().Spring;
		PlayerPreferences.OnPreferencesSavedOrLoaded += OnPreferencesSavedOrLoaded;
		OnPreferencesSavedOrLoaded();
	}

	protected override void OnDestroy()
	{
		base.OnDestroy();
		Timer.OnTimerStart -= OnTimerStart;
		Timer.OnTimerRestart -= OnTimerRestart;
		Timer.OnTimerEnd -= OnTimerEnd;
		PlayerPreferences.OnPreferencesSavedOrLoaded -= OnPreferencesSavedOrLoaded;
	}

	protected override void OnUpdate()
	{
		UpdatePosition();
	}

	private void UpdatePosition()
	{
		if ( !PlayerPreferences.Instance.HudSwayEnabled )
		{
			Position = Vector4.Zero;
			return;
		}

		Vector4 viewPunchContribution = GetViewPunchContribution();
		Vector4 swayTurnContribution = GetSwayTurnContribution();
		Vector4 swayMoveContribution = GetSwayMoveContribution();

		WishSwayContribution = swayTurnContribution + swayMoveContribution;
		SwayContribution = SwayContribution.LerpTo( WishSwayContribution, Time.Delta );

		Position = viewPunchContribution + SwayContribution;
	}

	private Vector4 GetViewPunchContribution()
	{
		Vector4 viewPunchPos = new(ViewPunchSpring.Position.y, ViewPunchSpring.Position.x, ViewPunchSpring.Position.z, 0f);
		viewPunchPos.x *= 3f;
		viewPunchPos.y *= 3f;
		viewPunchPos.z *= 0.15f;

		return viewPunchPos;
	}

	private Vector4 GetSwayTurnContribution()
	{
		Angles inputDelta = PlayerController.GetInputDelta();
		Vector4 swayContribution = new(inputDelta.yaw, inputDelta.pitch, inputDelta.yaw, 0f);
		swayContribution.x *= 23f;
		swayContribution.y *= -23f;
		swayContribution.z *= -0.2f;

		swayContribution.x = swayContribution.x.Clamp( -20f, 20f );
		swayContribution.y = swayContribution.y.Clamp( -20f, 20f );
		swayContribution.z = swayContribution.z.Clamp( -20f, 20f );

		return swayContribution;
	}

	private Vector4 GetSwayMoveContribution()
	{
		Vector3 velocity = Controller.Velocity;
		Vector3 projVel = Vector3.VectorPlaneProject( velocity, Controller.EyeAngles.Forward );
		Vector3 rightEye = Controller.EyeAngles.Forward.Cross( Vector3.Up ).Normal;
		Vector3 upEye = rightEye.Cross( Controller.EyeAngles.Forward ).Normal;

		float relativeHorzVelocity = projVel.Dot( rightEye );
		float relativeVertVelocity = projVel.Dot( upEye );
		float relativeForwardVelocity = velocity.Dot( Controller.EyeAngles.Forward );

		float relativeHorzVelocityFrac = MathF.Abs( relativeHorzVelocity ).LerpInverse( 0f, Controller.PlayerSettings.SprintSpeed
		) * MathF.Sign( relativeHorzVelocity );
		float relativeVertVelocityFrac = MathF.Abs( relativeVertVelocity ).LerpInverse( 0f, Controller.PlayerSettings.SprintSpeed
		) * MathF.Sign( relativeVertVelocity );
		float relativeForwardVelocityFrac = MathF.Abs( relativeForwardVelocity ).LerpInverse( 0f,
			Controller.PlayerSettings.SprintSpeed
		) * MathF.Sign( relativeForwardVelocity );

		Vector4 swayContribution = new(relativeHorzVelocityFrac, relativeVertVelocityFrac, relativeHorzVelocityFrac,
			relativeForwardVelocityFrac);

		swayContribution.x *= -16f;
		swayContribution.y *= 16f;
		swayContribution.z *= -0.6f;
		swayContribution.w *= -0.02f;

		return swayContribution;
	}

	private float GetScale() => 1f / (1f + Position.w);

	private void OnTimerStart()
	{
		if ( PlayerPreferences.Instance.HudEnabled && TimerPanel is null )
		{
			TimerPanel = new TimerPanel { Timer = Timer, Parent = Panel };
		}

		TimerPanel?.RemoveClass( "complete" );
		TimerPanel?.RemoveClass( "pb" );
	}

	private void OnTimerRestart()
	{
		TimerPanel?.Delete();
		TimerPanel = null;
	}

	private void OnTimerEnd( float _1, bool isBest, int _2 )
	{
		TimerPanel?.AddClass( isBest ? "pb" : "complete" );
	}

	private void OnPreferencesSavedOrLoaded()
	{
		ScreenPanel screenPanel = Components.Get<ScreenPanel>( FindMode.EverythingInSelf );
		screenPanel.Scale = PlayerPreferences.Instance.HudScale;
		screenPanel.Enabled = PlayerPreferences.Instance.HudEnabled;

		StateHasChanged();
	}
}
