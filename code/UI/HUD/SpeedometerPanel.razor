@namespace Gauntlet.UI
@using Gauntlet.Player
@using Gauntlet.Player.Mechanics
@using Gauntlet.Utils
@inherits Panel

<root class="pk @( Compact ? "compact" : "regular" )">
	<div class="speedometer-container @( Compact ? "" : "backdrop" )">
		<p class="mono">@Common.HupsToKph( Controller.HorzVelocity.Length ).ToString( "F1" )</p>
		<div class="spacer"></div>
		<p class="unit">kph</p>
		<div class="walljump-container" @ref=" WallJumpContainerPanel"></div>
	</div>
</root>

@code
{
	public PlayerController Controller { get; set; }
	private Panel WallJumpContainerPanel { get; set; }
	public bool Compact { get; set; }

	protected override int BuildHash() =>
		HashCode.Combine( Common.HupsToKph( Controller.HorzVelocity.Length ).ToString( "F1" ) );

	protected override void OnAfterTreeRender( bool firstTime )
	{
		if ( !firstTime )
		{
			return;
		}

		Controller.OnFastWallJump += OnFastWallJump;
		PlayerPreferences.OnPreferencesSavedOrLoaded += OnPreferencesSavedOrLoaded;
		OnPreferencesSavedOrLoaded();
	}

	public override void OnDeleted()
	{
		Controller.OnFastWallJump -= OnFastWallJump;
		PlayerPreferences.OnPreferencesSavedOrLoaded -= OnPreferencesSavedOrLoaded;
	}

	private void OnFastWallJump( float speedDiff, float time )
	{
		if ( !PlayerPreferences.Instance.WallKickHudEnabled )
		{
			return;
		}

		WallJumpPanel wallJumpPanel = new WallJumpPanel();
		wallJumpPanel.Compact = Compact;
		wallJumpPanel.SpeedDiff = speedDiff;

		// There will always be at least 1 tick between touching the wall and being able to jump
		wallJumpPanel.IsPerfect = Convert.ToInt32( time / Controller.Scene.FixedDelta ) == 1;

		CrouchMechanic crouch = Controller.GetMechanic<CrouchMechanic>();
		wallJumpPanel.IsCrouchKick = crouch.TimeSinceStart == 0;

		wallJumpPanel.Time = time - Controller.Scene.FixedDelta;
		wallJumpPanel.Parent = WallJumpContainerPanel;
		DeletePanelAfterTime( wallJumpPanel, 1000 );
	}

	private async void DeletePanelAfterTime( Panel panel, int time )
	{
		await Task.Delay( time );
		panel.Delete();
	}

	private void OnPreferencesSavedOrLoaded()
	{
		if ( PlayerPreferences.Instance.SpeedometerHudCompactEnabled )
		{
			Style.Left = Length.Fraction( PlayerPreferences.Instance.SpeedometerHudCompactPositionX );
			Style.Top = Length.Fraction( PlayerPreferences.Instance.SpeedometerHudCompactPositionY );
		}
		else
		{
			Style.Left = null;
			Style.Top = null;
		}

		StateHasChanged();
	}
}
